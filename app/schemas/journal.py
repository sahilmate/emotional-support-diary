from pydantic import BaseModel, Field
from typing import Optional, List
from datetime import datetime
from app.db import PyObjectId, MongoModel

class MoodData(BaseModel):
    emoji: str
    label: str
    value: str  # Ensure this field is required
    
class JournalEntry(BaseModel):
    id: Optional[str]  # Optional if the ID is generated by the database
    user_id: PyObjectId  # Ensure user_id is an ObjectId
    content: str
    mood: Optional[MoodData]  # Example: {"emoji": "ðŸ˜Š", "label": "Happy"}
    tags: Optional[List[str]]
    created_at: datetime
    updated_at: Optional[datetime]
    is_draft: Optional[bool] = False    

class JournalEntryBase(BaseModel):
    content: str = Field(..., min_length=1)
    mood: Optional[MoodData] = None
    tags: Optional[List[str]] = []

class JournalEntryCreate(JournalEntryBase):
    is_draft: Optional[bool] = False  # Add this field to indicate if the entry is a draft

class JournalEntryResponse(MongoModel):
    user_id: PyObjectId
    content: str
    mood: dict
    # ... other fields ...

    class Config:
        allow_population_by_field_name = True
        
class JournalEntryResponse(JournalEntryBase):
    id: Optional[str] = None
    user_id: str  # Ensure user_id is serialized as a string
    created_at: datetime
    updated_at: Optional[datetime] = None
    ai_response: Optional[str] = None

    class Config:
        orm_mode = True
        json_encoders = {PyObjectId: str}  # Serialize ObjectId as a string

class JournalEntryUpdate(BaseModel):
    content: Optional[str] = None
    mood: Optional[MoodData] = None
    tags: Optional[List[str]] = None

class ReflectionAnswer(BaseModel):
    question: str
    answer: str
    
from pydantic import BaseModel
from typing import Optional

class MoodTrackerResponse(BaseModel):
    date: str  # The date in "YYYY-MM-DD" format
    mood: Optional[dict]  # A dictionary containing mood details (e.g., emoji, label, value)    